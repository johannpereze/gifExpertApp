{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","process","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","id","images","downsized_medium","GifGridItem","className","src","alt","require","config","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","i","ReactDOM","render","document","getElementById"],"mappings":"oMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACWC,mCAC1BC,EAFe,iDAEiCC,UACpDJ,GAHmB,6BACWE,oCADX,SAKFG,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,EAAKC,GAC1B,MAAO,CACLC,GAAIF,EAAIE,GACRD,MAAOD,EAAIC,MACXT,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAcdM,GAdc,4CAAH,sDCAb,IAAMO,EAAc,SAAC,GAAuB,EAArBH,GAAsB,IAAlBD,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAW,0CAAhB,UACE,qBAAKC,IAAKf,EAAKgB,IAAKP,IACpB,4BAAIA,QCCVQ,EAAQ,IAAUC,SAEX,IAAMC,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SACxB,ECLK,SAAsBA,GAC3B,MAA0Bd,mBAAS,CACjCsB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACR3B,EAAQC,GAAU2B,MAAK,SAACC,GACtBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACvB,IAEGwB,EDV2BK,CAAa7B,GAAjCc,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIN,UAAW,oCAAf,SAAqDjB,IACpDuB,GAAW,4CACZ,qBAAKN,UAAW,YAAhB,SACGH,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIE,aEZ1BiB,EAAe,WAC1B,MAAoC5C,mBAAS,CAAC,eAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWgB,KAAI,SAACV,EAAU+B,GAAX,OACd,cAAC,EAAD,CAAwB/B,SAAUA,GAApBA,Y,MCTxBgC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.4ef5fae1.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const REACT_APP_GIPHY_API_KEY = process.env.REACT_APP_GIPHY_API_KEY;\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${REACT_APP_GIPHY_API_KEY}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img, title) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","export const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className={'card  animate__animated animate__fadeIn'}>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","// import { useEffect, useState } from \"react\";\n// import { getGifs } from \"../helpers/getGifs\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\nrequire(\"dotenv\").config();\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className={\"animate__animated animate__fadeIn\"}>{category}</h3>\n      {loading && <p>Cargando...</p>}\n      <div className={\"card-grid\"}>\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport function useFetchGifs(category) {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n}\n","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"evangelion\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category, i) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {GifExpertApp} from \"./GifExpertApp\";\n\nimport './index.css'\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}